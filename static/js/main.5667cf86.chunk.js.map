{"version":3,"sources":["components/Wrapper/Wrapper.js","components/NavBar/NavBar.js","components/Title/Title.js","components/CharCard/CharCard.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","NavBar","href","message","indexOf","style","color","currentScore","topScore","Title","CharCard","onClick","selectCharacter","name","alt","src","image","App","state","characters","unselectedCharacter","shuffleCharacterArray","array","i","length","j","Math","floor","random","_ref","characterName","console","log","findCharacter","_this","find","item","undefined","setState","findNewCharacter","filter","_this2","this","components_Wrapper_Wrapper","components_NavBar_NavBar","components_Title_Title","map","character","components_CharCard_CharCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5667cf86.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./NavBar.css\";\n\nconst NavBar = props => (\n  <div>\n    <ul className=\"nav nav-pills nav-justified\">\n      <li>\n        <a href=\"/\">Marvel Memory Game</a>\n      </li>\n      <li\n        className={\n          props.message.indexOf(\"incorrectly\") !== -1\n            ? \"desc-incorrect\"\n            : props.message.indexOf(\"correctly\") !== -1\n            ? \"desc-correct\"\n            : \"desc-normal\"\n        }\n      >\n        {props.message}\n      </li>\n      <li>\n        Score: <span style={{ color: \"#36FF80\" }}>{props.currentScore}</span> |\n        Top Score: <span style={{ color: \"yellow\" }}>{props.topScore}</span>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => (\n  <div className=\"titlebox\">\n    <h1>Marvel's Memory Game</h1>\n    <p>\n      {\" \"}\n      Click on a Marvel character to earn points. The game ends when you click\n      on the same Marvel character more than once !!!{\" \"}\n    </p>\n  </div>\n);\n\nexport default Title;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport \"./CharCard.css\";\n\nconst CharCard = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <a\n        onClick={() => props.selectCharacter(props.name)}\n        className={\n          props.currentScore === 0\n            ? \"style_prevu_kit style_prevu_kit_ex\"\n            : \"style_prevu_kit\"\n        }\n      >\n        <img alt={props.name} src={props.image} />\n      </a>\n    </div>\n  </div>\n);\n\nexport default CharCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport characters from \"./characters.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport NavBar from \"./components/NavBar\";\nimport Title from \"./components/Title\";\nimport CharCard from \"./components/CharCard\";\n\nclass App extends Component {\n  state = {\n    message: \"Select and image to begin the game\",\n    topScore: 0,\n    currentScore: 0,\n    characters: characters,\n    unselectedCharacter: characters\n  };\n\n  componentDidMount() {}\n\n  shuffleCharacterArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  selectCharacter = characterName => {\n    console.log(characterName);\n    const findCharacter = this.state.unselectedCharacter.find(\n      item => item.name === characterName\n    );\n\n    console.log(findCharacter);\n    //if findCharacter === undefined -> failed to select a new character\n    if (findCharacter === undefined) {\n      this.setState({\n        message: \"You guessed incorrectly!\",\n        topScore:\n          this.state.currentScore > this.state.topScore\n            ? this.state.currentScore\n            : this.state.topScore,\n        currentScore: 0,\n        characters: characters,\n        unselectedCharacter: characters\n      });\n    } else {\n      //Successfully found a new character\n      const findNewCharacter = this.state.unselectedCharacter.filter(\n        item => item.name !== characterName\n      );\n\n      this.setState({\n        message: \"You guessed Correctly!\",\n        currentScore: this.state.currentScore + 1,\n        characters: characters,\n        unselectedCharacter: findNewCharacter\n      });\n    }\n\n    this.shuffleCharacterArray(characters);\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <NavBar\n          message={this.state.message}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Title />\n        {this.state.characters.map(character => (\n          <CharCard\n            key={character.name}\n            name={character.name}\n            image={character.image}\n            selectCharacter={this.selectCharacter}\n            currentScore={this.state.currentScore}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}